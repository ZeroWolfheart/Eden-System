[GPU]
# Numero de GPU a utilizar.
GPUs=1
# Numero de imagenes a entrenar en por GPU.
# Una GPU de 12 GB puede manejar 2 imagenes de 1024*1024px
# Ajustar con base a la memoria de la GPU a utilizar, siempre buscando el valor más alto
# IMG_GPU = 2
IMG_GPU=1

[IMAGEN]
# Reescalado de imagen de entrada
# Generalmente utilizar "cuadrado" tanto para entrenamiento como predicción
# Modos de reescalado disponiles:
#       none: regresa la imagen sin cambios
#       cuadrado: Reescala y rellena con ceros para tener una imagen de maxDim * maxDim
#       relleno64: rellena base y altura con zeros, para hacerlos multiplos de 64. Sí minDim o minEscala son provistos, escala la imagen antes de rellenar. maxDim es ignorado en este modo.
#       aleatorio: toma fragmentos aleatorios de la imagen. Primero escala la imagen basado en minDim y minEscala, despues, toma un fragmento aleatorio de tamaño minDim * minDim
MODO_REESCALADO=cuadrado
MIN_DIM=128
MAX_DIM=200
# Factor minimo de reescalado. Se verifica despues de MMIN_DIM y puede forzar
# una escala mayor. Por ejemplo, si esta establecido en 2 las imagenes se escalarán al doble
# de ancho y alto, aun si MIN_DIM no lo requiere.
# Sin embargo, en modo 'cuadrado', puede ser sobre pasado por MAX_DIM.
ESCALA_MINIMA=0
# Numero de canales por color. RGB = 3, escala de grises = 1, RGB-D = 4
CANALES=3

[MODELO]
# Numero de clases a identificar (incluyendo background)
NUM_CLASES=3
# Celdas por lado de regilla
# La imagen se divirá en una regilla de S x S celdas
# Es importante para el calculo de las capas del perceptrón y el tensor de salida
# Debe poder dividir los lados de la imagen de manera entera
S=4
# Cantidad de Anchors (cajas predictivas), generas por cada celda de la regilla
B=6
# Tipo de Red
# Tipo de red que es construida.
#TODO: Describir tipos de red
#"Conv24"
#"Conv19"
#"Res55"
RED_TIPO=Conv19
# Tipo de salida:
# "Y": Construye una salida con forma de Y, que tiene su disyunción al finalizar la red
#   convolucional y clacula por separado, los Anchors y deltas
# "L": Contruye una salida con forma de L, donde la salida que calcula las deltas, se
#   se encuentra como una derivación de la salida que calcula los Anchors
# "I": Construye una unica salida, que solo contempla los Anchor y la desviación adecuada
#   para aquel más apto
RED_TIPO_SALIDA=I

[ANCLAS]
# Longitud de un lado del Anchor cuadrado en pixeles
ANCHOR_SCALAS=68,66.369048
    55.00000000000001,94.64285799999999
    110.00000000000001,141.353384
    86.0, 132.330828
    126.0, 55.00000000000001
    147.0, 103.923076
    71.0, 105.29824599999999
    49.0, 65.60000000000001
    77.0, 81.0
    97.0, 91.729324
    34.0, 46.134328000000004
    159.0, 166.0

# Factores de Anchors en cada celda (base/ altura)
# Un valor 1 representa un Anchor cuadrado, y 0.5 es un Anchor más ancho (con mayor base)
ANCHOR_FACTORES = 0.33, 0.35, 0.43, 0.59, 0.68, 0.7, 0.8, 0.8, 1.01, 1.08, 1.16, 1.41

# Si esta activado, reduce la instancia de la mascara para
# reducir la carga de memoria. Recomendado cuando se usan imagenes de alta resulucion.
USAR_MINIMASCARA=true
# base, altura de la minimascara
MINIMASCARA_SHAPE = 56, 56

[APRENDIZAJE]
# IoU Minimo para marcar como positivo un Anchor
DELTA_IOU_MIN_POSITIVO=0.4
# Umbral maximo para mmarcar como negativo un Anchor
DELTA_IOU_MAX_NEGATIVO=0.3
# Utilizar o no el idf del algoritmo de generación de deltas
USAR_IDF=false
# Maximo numero de intancias (reales) en una imagen
MAX_R_INSTANCIAS=100
# Max number of final detections
DETECTION_MAX_INSTANCES=100
# Minimum probability value to accept a detected instance
# ROIs below this threshold are skipped
DETECTION_MIN_CONFIDENCE=0.7
# Non-maximum suppression threshold for detection
DETECTION_NMS_THRESHOLD=0.3
# Learning rate and momentum
# The Mask RCNN paper uses lr=0.02, but on TensorFlow it causes
# weights to explode. Likely due to differences in optimizer
# implementation.
LEARNING_RATE=0.001
LEARNING_MOMENTUM=0.9
# Weight decay regularization
WEIGHT_DECAY=0.0001
# Desviacion estandar para el refoinamiento de la caja contenedora para entrenamiento y deteccion
ENT_CC_STD_DEV=0.1, 0.1, 0.2, 0.2
BBOX_STD_DEV=0.1, 0.1, 0.2, 0.2